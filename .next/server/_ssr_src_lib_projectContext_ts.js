"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_projectContext_ts";
exports.ids = ["_ssr_src_lib_projectContext_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/database.ts":
/*!*****************************!*\
  !*** ./src/lib/database.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   getDBService: () => (/* binding */ getDBService),\n/* harmony export */   initDB: () => (/* binding */ initDB)\n/* harmony export */ });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"(ssr)/./node_modules/idb/build/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\nconst DB_NAME = 'specgen';\nconst DB_VERSION = 1;\n// Database instance\nlet dbInstance = null;\n// Initialize database\nasync function initDB() {\n    if (dbInstance) return dbInstance;\n    dbInstance = await (0,idb__WEBPACK_IMPORTED_MODULE_0__.openDB)(DB_NAME, DB_VERSION, {\n        upgrade (db) {\n            // Projects store\n            const projectStore = db.createObjectStore('projects', {\n                keyPath: 'id'\n            });\n            projectStore.createIndex('by-created', 'created_at');\n            // Project contexts store\n            const contextStore = db.createObjectStore('project_contexts', {\n                keyPath: 'id'\n            });\n            contextStore.createIndex('by-project-active', [\n                'project_id',\n                'is_active'\n            ]);\n            contextStore.createIndex('by-project-created', [\n                'project_id',\n                'created_at'\n            ]);\n            // Project context diffs store\n            const diffStore = db.createObjectStore('project_context_diffs', {\n                keyPath: 'id'\n            });\n            diffStore.createIndex('by-context', 'project_context_id');\n            // Spec inputs store\n            const inputStore = db.createObjectStore('spec_inputs', {\n                keyPath: 'id'\n            });\n            inputStore.createIndex('by-project-created', [\n                'project_id',\n                'created_at'\n            ]);\n            // Spec outputs store\n            const outputStore = db.createObjectStore('spec_outputs', {\n                keyPath: 'id'\n            });\n            outputStore.createIndex('by-input', 'input_id');\n            outputStore.createIndex('by-created', 'created_at');\n            // Spec revisions store\n            const revisionStore = db.createObjectStore('spec_revisions', {\n                keyPath: 'id'\n            });\n            revisionStore.createIndex('by-output', 'output_id');\n            // Spec evaluations store\n            const evalStore = db.createObjectStore('spec_evaluations', {\n                keyPath: 'id'\n            });\n            evalStore.createIndex('by-output', 'output_id');\n        }\n    });\n    return dbInstance;\n}\n// Database operations\nclass DatabaseService {\n    constructor(db){\n        this.db = db;\n    }\n    // Projects\n    async createProject(data) {\n        const project = {\n            ...data,\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            created_at: new Date()\n        };\n        await this.db.add('projects', project);\n        return project;\n    }\n    async getProject(id) {\n        return this.db.get('projects', id);\n    }\n    async getProjects() {\n        return this.db.getAllFromIndex('projects', 'by-created');\n    }\n    async updateProject(id, updates) {\n        const project = await this.getProject(id);\n        if (!project) throw new Error('Project not found');\n        const updated = {\n            ...project,\n            ...updates\n        };\n        await this.db.put('projects', updated);\n    }\n    // Project Contexts\n    async createProjectContext(data) {\n        const context = {\n            ...data,\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            created_at: new Date()\n        };\n        // If this is active, deactivate others\n        if (context.is_active) {\n            await this.deactivateProjectContexts(context.project_id);\n        }\n        await this.db.add('project_contexts', context);\n        return context;\n    }\n    async getActiveProjectContext(projectId) {\n        const contexts = await this.db.getAllFromIndex('project_contexts', 'by-project-active', [\n            projectId,\n            1\n        ]);\n        return contexts[0];\n    }\n    async getProjectContexts(projectId) {\n        return this.db.getAllFromIndex('project_contexts', 'by-project-created', [\n            projectId\n        ]);\n    }\n    async activateProjectContext(contextId) {\n        const context = await this.db.get('project_contexts', contextId);\n        if (!context) throw new Error('Context not found');\n        // Deactivate others\n        await this.deactivateProjectContexts(context.project_id);\n        // Activate this one\n        context.is_active = 1;\n        await this.db.put('project_contexts', context);\n    }\n    async deactivateProjectContexts(projectId) {\n        const activeContexts = await this.db.getAllFromIndex('project_contexts', 'by-project-active', [\n            projectId,\n            1\n        ]);\n        for (const context of activeContexts){\n            context.is_active = 0;\n            await this.db.put('project_contexts', context);\n        }\n    }\n    // Spec Inputs\n    async createSpecInput(data) {\n        const input = {\n            ...data,\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            created_at: new Date()\n        };\n        await this.db.add('spec_inputs', input);\n        return input;\n    }\n    async getSpecInput(id) {\n        return this.db.get('spec_inputs', id);\n    }\n    async getSpecInputsByProject(projectId) {\n        return this.db.getAllFromIndex('spec_inputs', 'by-project-created', [\n            projectId\n        ]);\n    }\n    // Spec Outputs\n    async createSpecOutput(data) {\n        const output = {\n            ...data,\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            created_at: new Date()\n        };\n        await this.db.add('spec_outputs', output);\n        return output;\n    }\n    async getSpecOutput(id) {\n        return this.db.get('spec_outputs', id);\n    }\n    async getSpecOutputByInput(inputId) {\n        const outputs = await this.db.getAllFromIndex('spec_outputs', 'by-input', inputId);\n        return outputs[0] // Return latest\n        ;\n    }\n    async getRecentSpecOutputs(limit = 10) {\n        const outputs = await this.db.getAllFromIndex('spec_outputs', 'by-created');\n        return outputs.slice(-limit).reverse();\n    }\n    // Spec Evaluations\n    async createSpecEvaluation(data) {\n        const evaluation = {\n            ...data,\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            created_at: new Date()\n        };\n        await this.db.add('spec_evaluations', evaluation);\n        return evaluation;\n    }\n    async getSpecEvaluation(outputId) {\n        const evaluations = await this.db.getAllFromIndex('spec_evaluations', 'by-output', outputId);\n        return evaluations[0];\n    }\n}\n// Global database service instance\nlet dbService = null;\nasync function getDBService() {\n    if (!dbService) {\n        const db = await initDB();\n        dbService = new DatabaseService(db);\n    }\n    return dbService;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxFQUFFLENBQUMsZ0JBQWdCOztJQUNwQztJQUVBLE1BQU1DLHFCQUFxQkMsUUFBUSxFQUFFLEVBQStCO1FBQ2xFLE1BQU1GLFVBQVUsTUFBTSxJQUFJLENBQUNqRCxFQUFFLENBQUNzQixlQUFlLENBQUMsZ0JBQWdCO1FBQzlELE9BQU8yQixRQUFRRyxLQUFLLENBQUMsQ0FBQ0QsT0FBT0UsT0FBTztJQUN0QztJQUVBLG1CQUFtQjtJQUNuQixNQUFNQyxxQkFBcUJ6QyxJQUErQyxFQUEyQjtRQUNuRyxNQUFNMEMsYUFBNkI7WUFDakMsR0FBRzFDLElBQUk7WUFDUEUsSUFBSXJCLGdEQUFNQTtZQUNWc0IsWUFBWSxJQUFJQztRQUNsQjtRQUNBLE1BQU0sSUFBSSxDQUFDakIsRUFBRSxDQUFDa0IsR0FBRyxDQUFDLG9CQUFvQnFDO1FBQ3RDLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNQyxrQkFBa0JDLFFBQWdCLEVBQXVDO1FBQzdFLE1BQU1DLGNBQWMsTUFBTSxJQUFJLENBQUMxRCxFQUFFLENBQUNzQixlQUFlLENBQUMsb0JBQW9CLGFBQWFtQztRQUNuRixPQUFPQyxXQUFXLENBQUMsRUFBRTtJQUN2QjtBQUNGO0FBRUEsbUNBQW1DO0FBQ25DLElBQUlDLFlBQW9DO0FBRWpDLGVBQWVDO0lBQ3BCLElBQUksQ0FBQ0QsV0FBVztRQUNkLE1BQU0zRCxLQUFLLE1BQU1GO1FBQ2pCNkQsWUFBWSxJQUFJaEQsZ0JBQWdCWDtJQUNsQztJQUNBLE9BQU8yRDtBQUNUIiwic291cmNlcyI6WyIvVXNlcnMvamFzb25odWxiZXJ0L1Byb2plY3RzL3NwZWNnZW4vc3JjL2xpYi9kYXRhYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcGVuREIsIElEQlBEYXRhYmFzZSB9IGZyb20gJ2lkYidcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnXG5pbXBvcnQge1xuICBQcm9qZWN0LFxuICBQcm9qZWN0Q29udGV4dCxcbiAgUHJvamVjdENvbnRleHREaWZmLFxuICBTcGVjSW5wdXRSZWNvcmQsXG4gIFNwZWNPdXRwdXRSZWNvcmQsXG4gIFNwZWNSZXZpc2lvbixcbiAgU3BlY0V2YWx1YXRpb24sXG59IGZyb20gJ0AvdHlwZXMvZGF0YWJhc2UnXG5cbmNvbnN0IERCX05BTUUgPSAnc3BlY2dlbidcbmNvbnN0IERCX1ZFUlNJT04gPSAxXG5cbi8vIERhdGFiYXNlIGludGVyZmFjZVxuaW50ZXJmYWNlIFNwZWNHZW5EQiB7XG4gIHByb2plY3RzOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogUHJvamVjdFxuICAgIGluZGV4ZXM6IHsgJ2J5LWNyZWF0ZWQnOiBEYXRlIH1cbiAgfVxuICBwcm9qZWN0X2NvbnRleHRzOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogUHJvamVjdENvbnRleHRcbiAgICBpbmRleGVzOiB7ICdieS1wcm9qZWN0LWFjdGl2ZSc6IFtzdHJpbmcsIG51bWJlcl07ICdieS1wcm9qZWN0LWNyZWF0ZWQnOiBbc3RyaW5nLCBEYXRlXSB9XG4gIH1cbiAgcHJvamVjdF9jb250ZXh0X2RpZmZzOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogUHJvamVjdENvbnRleHREaWZmXG4gICAgaW5kZXhlczogeyAnYnktY29udGV4dCc6IHN0cmluZyB9XG4gIH1cbiAgc3BlY19pbnB1dHM6IHtcbiAgICBrZXk6IHN0cmluZ1xuICAgIHZhbHVlOiBTcGVjSW5wdXRSZWNvcmRcbiAgICBpbmRleGVzOiB7ICdieS1wcm9qZWN0LWNyZWF0ZWQnOiBbc3RyaW5nLCBEYXRlXSB9XG4gIH1cbiAgc3BlY19vdXRwdXRzOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogU3BlY091dHB1dFJlY29yZFxuICAgIGluZGV4ZXM6IHsgJ2J5LWlucHV0Jzogc3RyaW5nOyAnYnktY3JlYXRlZCc6IERhdGUgfVxuICB9XG4gIHNwZWNfcmV2aXNpb25zOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogU3BlY1JldmlzaW9uXG4gICAgaW5kZXhlczogeyAnYnktb3V0cHV0Jzogc3RyaW5nIH1cbiAgfVxuICBzcGVjX2V2YWx1YXRpb25zOiB7XG4gICAga2V5OiBzdHJpbmdcbiAgICB2YWx1ZTogU3BlY0V2YWx1YXRpb25cbiAgICBpbmRleGVzOiB7ICdieS1vdXRwdXQnOiBzdHJpbmcgfVxuICB9XG59XG5cbi8vIERhdGFiYXNlIGluc3RhbmNlXG5sZXQgZGJJbnN0YW5jZTogSURCUERhdGFiYXNlPFNwZWNHZW5EQj4gfCBudWxsID0gbnVsbFxuXG4vLyBJbml0aWFsaXplIGRhdGFiYXNlXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdERCKCk6IFByb21pc2U8SURCUERhdGFiYXNlPFNwZWNHZW5EQj4+IHtcbiAgaWYgKGRiSW5zdGFuY2UpIHJldHVybiBkYkluc3RhbmNlXG5cbiAgZGJJbnN0YW5jZSA9IGF3YWl0IG9wZW5EQjxTcGVjR2VuREI+KERCX05BTUUsIERCX1ZFUlNJT04sIHtcbiAgICB1cGdyYWRlKGRiKSB7XG4gICAgICAvLyBQcm9qZWN0cyBzdG9yZVxuICAgICAgY29uc3QgcHJvamVjdFN0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3Byb2plY3RzJywgeyBrZXlQYXRoOiAnaWQnIH0pXG4gICAgICBwcm9qZWN0U3RvcmUuY3JlYXRlSW5kZXgoJ2J5LWNyZWF0ZWQnLCAnY3JlYXRlZF9hdCcpXG5cbiAgICAgIC8vIFByb2plY3QgY29udGV4dHMgc3RvcmVcbiAgICAgIGNvbnN0IGNvbnRleHRTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwcm9qZWN0X2NvbnRleHRzJywgeyBrZXlQYXRoOiAnaWQnIH0pXG4gICAgICBjb250ZXh0U3RvcmUuY3JlYXRlSW5kZXgoJ2J5LXByb2plY3QtYWN0aXZlJywgWydwcm9qZWN0X2lkJywgJ2lzX2FjdGl2ZSddKVxuICAgICAgY29udGV4dFN0b3JlLmNyZWF0ZUluZGV4KCdieS1wcm9qZWN0LWNyZWF0ZWQnLCBbJ3Byb2plY3RfaWQnLCAnY3JlYXRlZF9hdCddKVxuXG4gICAgICAvLyBQcm9qZWN0IGNvbnRleHQgZGlmZnMgc3RvcmVcbiAgICAgIGNvbnN0IGRpZmZTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwcm9qZWN0X2NvbnRleHRfZGlmZnMnLCB7IGtleVBhdGg6ICdpZCcgfSlcbiAgICAgIGRpZmZTdG9yZS5jcmVhdGVJbmRleCgnYnktY29udGV4dCcsICdwcm9qZWN0X2NvbnRleHRfaWQnKVxuXG4gICAgICAvLyBTcGVjIGlucHV0cyBzdG9yZVxuICAgICAgY29uc3QgaW5wdXRTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdzcGVjX2lucHV0cycsIHsga2V5UGF0aDogJ2lkJyB9KVxuICAgICAgaW5wdXRTdG9yZS5jcmVhdGVJbmRleCgnYnktcHJvamVjdC1jcmVhdGVkJywgWydwcm9qZWN0X2lkJywgJ2NyZWF0ZWRfYXQnXSlcblxuICAgICAgLy8gU3BlYyBvdXRwdXRzIHN0b3JlXG4gICAgICBjb25zdCBvdXRwdXRTdG9yZSA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdzcGVjX291dHB1dHMnLCB7IGtleVBhdGg6ICdpZCcgfSlcbiAgICAgIG91dHB1dFN0b3JlLmNyZWF0ZUluZGV4KCdieS1pbnB1dCcsICdpbnB1dF9pZCcpXG4gICAgICBvdXRwdXRTdG9yZS5jcmVhdGVJbmRleCgnYnktY3JlYXRlZCcsICdjcmVhdGVkX2F0JylcblxuICAgICAgLy8gU3BlYyByZXZpc2lvbnMgc3RvcmVcbiAgICAgIGNvbnN0IHJldmlzaW9uU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnc3BlY19yZXZpc2lvbnMnLCB7IGtleVBhdGg6ICdpZCcgfSlcbiAgICAgIHJldmlzaW9uU3RvcmUuY3JlYXRlSW5kZXgoJ2J5LW91dHB1dCcsICdvdXRwdXRfaWQnKVxuXG4gICAgICAvLyBTcGVjIGV2YWx1YXRpb25zIHN0b3JlXG4gICAgICBjb25zdCBldmFsU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnc3BlY19ldmFsdWF0aW9ucycsIHsga2V5UGF0aDogJ2lkJyB9KVxuICAgICAgZXZhbFN0b3JlLmNyZWF0ZUluZGV4KCdieS1vdXRwdXQnLCAnb3V0cHV0X2lkJylcbiAgICB9LFxuICB9KVxuXG4gIHJldHVybiBkYkluc3RhbmNlXG59XG5cbi8vIERhdGFiYXNlIG9wZXJhdGlvbnNcbmV4cG9ydCBjbGFzcyBEYXRhYmFzZVNlcnZpY2Uge1xuICBwcml2YXRlIGRiOiBJREJQRGF0YWJhc2U8U3BlY0dlbkRCPlxuXG4gIGNvbnN0cnVjdG9yKGRiOiBJREJQRGF0YWJhc2U8U3BlY0dlbkRCPikge1xuICAgIHRoaXMuZGIgPSBkYlxuICB9XG5cbiAgLy8gUHJvamVjdHNcbiAgYXN5bmMgY3JlYXRlUHJvamVjdChkYXRhOiBPbWl0PFByb2plY3QsICdpZCcgfCAnY3JlYXRlZF9hdCc+KTogUHJvbWlzZTxQcm9qZWN0PiB7XG4gICAgY29uc3QgcHJvamVjdDogUHJvamVjdCA9IHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBpZDogdXVpZHY0KCksXG4gICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgIH1cbiAgICBhd2FpdCB0aGlzLmRiLmFkZCgncHJvamVjdHMnLCBwcm9qZWN0KVxuICAgIHJldHVybiBwcm9qZWN0XG4gIH1cblxuICBhc3luYyBnZXRQcm9qZWN0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFByb2plY3QgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5kYi5nZXQoJ3Byb2plY3RzJywgaWQpXG4gIH1cblxuICBhc3luYyBnZXRQcm9qZWN0cygpOiBQcm9taXNlPFByb2plY3RbXT4ge1xuICAgIHJldHVybiB0aGlzLmRiLmdldEFsbEZyb21JbmRleCgncHJvamVjdHMnLCAnYnktY3JlYXRlZCcpXG4gIH1cblxuICBhc3luYyB1cGRhdGVQcm9qZWN0KGlkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8UHJvamVjdD4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgdGhpcy5nZXRQcm9qZWN0KGlkKVxuICAgIGlmICghcHJvamVjdCkgdGhyb3cgbmV3IEVycm9yKCdQcm9qZWN0IG5vdCBmb3VuZCcpXG4gICAgXG4gICAgY29uc3QgdXBkYXRlZCA9IHsgLi4ucHJvamVjdCwgLi4udXBkYXRlcyB9XG4gICAgYXdhaXQgdGhpcy5kYi5wdXQoJ3Byb2plY3RzJywgdXBkYXRlZClcbiAgfVxuXG4gIC8vIFByb2plY3QgQ29udGV4dHNcbiAgYXN5bmMgY3JlYXRlUHJvamVjdENvbnRleHQoZGF0YTogT21pdDxQcm9qZWN0Q29udGV4dCwgJ2lkJyB8ICdjcmVhdGVkX2F0Jz4pOiBQcm9taXNlPFByb2plY3RDb250ZXh0PiB7XG4gICAgY29uc3QgY29udGV4dDogUHJvamVjdENvbnRleHQgPSB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaWQ6IHV1aWR2NCgpLFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICB9XG4gICAgXG4gICAgLy8gSWYgdGhpcyBpcyBhY3RpdmUsIGRlYWN0aXZhdGUgb3RoZXJzXG4gICAgaWYgKGNvbnRleHQuaXNfYWN0aXZlKSB7XG4gICAgICBhd2FpdCB0aGlzLmRlYWN0aXZhdGVQcm9qZWN0Q29udGV4dHMoY29udGV4dC5wcm9qZWN0X2lkKVxuICAgIH1cbiAgICBcbiAgICBhd2FpdCB0aGlzLmRiLmFkZCgncHJvamVjdF9jb250ZXh0cycsIGNvbnRleHQpXG4gICAgcmV0dXJuIGNvbnRleHRcbiAgfVxuXG4gIGFzeW5jIGdldEFjdGl2ZVByb2plY3RDb250ZXh0KHByb2plY3RJZDogc3RyaW5nKTogUHJvbWlzZTxQcm9qZWN0Q29udGV4dCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IGNvbnRleHRzID0gYXdhaXQgdGhpcy5kYi5nZXRBbGxGcm9tSW5kZXgoJ3Byb2plY3RfY29udGV4dHMnLCAnYnktcHJvamVjdC1hY3RpdmUnLCBbcHJvamVjdElkLCAxXSlcbiAgICByZXR1cm4gY29udGV4dHNbMF1cbiAgfVxuXG4gIGFzeW5jIGdldFByb2plY3RDb250ZXh0cyhwcm9qZWN0SWQ6IHN0cmluZyk6IFByb21pc2U8UHJvamVjdENvbnRleHRbXT4ge1xuICAgIHJldHVybiB0aGlzLmRiLmdldEFsbEZyb21JbmRleCgncHJvamVjdF9jb250ZXh0cycsICdieS1wcm9qZWN0LWNyZWF0ZWQnLCBbcHJvamVjdElkXSlcbiAgfVxuXG4gIGFzeW5jIGFjdGl2YXRlUHJvamVjdENvbnRleHQoY29udGV4dElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gYXdhaXQgdGhpcy5kYi5nZXQoJ3Byb2plY3RfY29udGV4dHMnLCBjb250ZXh0SWQpXG4gICAgaWYgKCFjb250ZXh0KSB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRleHQgbm90IGZvdW5kJylcbiAgICBcbiAgICAvLyBEZWFjdGl2YXRlIG90aGVyc1xuICAgIGF3YWl0IHRoaXMuZGVhY3RpdmF0ZVByb2plY3RDb250ZXh0cyhjb250ZXh0LnByb2plY3RfaWQpXG4gICAgXG4gICAgLy8gQWN0aXZhdGUgdGhpcyBvbmVcbiAgICBjb250ZXh0LmlzX2FjdGl2ZSA9IDFcbiAgICBhd2FpdCB0aGlzLmRiLnB1dCgncHJvamVjdF9jb250ZXh0cycsIGNvbnRleHQpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRlYWN0aXZhdGVQcm9qZWN0Q29udGV4dHMocHJvamVjdElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBhY3RpdmVDb250ZXh0cyA9IGF3YWl0IHRoaXMuZGIuZ2V0QWxsRnJvbUluZGV4KCdwcm9qZWN0X2NvbnRleHRzJywgJ2J5LXByb2plY3QtYWN0aXZlJywgW3Byb2plY3RJZCwgMV0pXG4gICAgXG4gICAgZm9yIChjb25zdCBjb250ZXh0IG9mIGFjdGl2ZUNvbnRleHRzKSB7XG4gICAgICBjb250ZXh0LmlzX2FjdGl2ZSA9IDBcbiAgICAgIGF3YWl0IHRoaXMuZGIucHV0KCdwcm9qZWN0X2NvbnRleHRzJywgY29udGV4dClcbiAgICB9XG4gIH1cblxuICAvLyBTcGVjIElucHV0c1xuICBhc3luYyBjcmVhdGVTcGVjSW5wdXQoZGF0YTogT21pdDxTcGVjSW5wdXRSZWNvcmQsICdpZCcgfCAnY3JlYXRlZF9hdCc+KTogUHJvbWlzZTxTcGVjSW5wdXRSZWNvcmQ+IHtcbiAgICBjb25zdCBpbnB1dDogU3BlY0lucHV0UmVjb3JkID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGlkOiB1dWlkdjQoKSxcbiAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgfVxuICAgIGF3YWl0IHRoaXMuZGIuYWRkKCdzcGVjX2lucHV0cycsIGlucHV0KVxuICAgIHJldHVybiBpbnB1dFxuICB9XG5cbiAgYXN5bmMgZ2V0U3BlY0lucHV0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFNwZWNJbnB1dFJlY29yZCB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmRiLmdldCgnc3BlY19pbnB1dHMnLCBpZClcbiAgfVxuXG4gIGFzeW5jIGdldFNwZWNJbnB1dHNCeVByb2plY3QocHJvamVjdElkOiBzdHJpbmcpOiBQcm9taXNlPFNwZWNJbnB1dFJlY29yZFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZGIuZ2V0QWxsRnJvbUluZGV4KCdzcGVjX2lucHV0cycsICdieS1wcm9qZWN0LWNyZWF0ZWQnLCBbcHJvamVjdElkXSlcbiAgfVxuXG4gIC8vIFNwZWMgT3V0cHV0c1xuICBhc3luYyBjcmVhdGVTcGVjT3V0cHV0KGRhdGE6IE9taXQ8U3BlY091dHB1dFJlY29yZCwgJ2lkJyB8ICdjcmVhdGVkX2F0Jz4pOiBQcm9taXNlPFNwZWNPdXRwdXRSZWNvcmQ+IHtcbiAgICBjb25zdCBvdXRwdXQ6IFNwZWNPdXRwdXRSZWNvcmQgPSB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaWQ6IHV1aWR2NCgpLFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5kYi5hZGQoJ3NwZWNfb3V0cHV0cycsIG91dHB1dClcbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICBhc3luYyBnZXRTcGVjT3V0cHV0KGlkOiBzdHJpbmcpOiBQcm9taXNlPFNwZWNPdXRwdXRSZWNvcmQgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5kYi5nZXQoJ3NwZWNfb3V0cHV0cycsIGlkKVxuICB9XG5cbiAgYXN5bmMgZ2V0U3BlY091dHB1dEJ5SW5wdXQoaW5wdXRJZDogc3RyaW5nKTogUHJvbWlzZTxTcGVjT3V0cHV0UmVjb3JkIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3Qgb3V0cHV0cyA9IGF3YWl0IHRoaXMuZGIuZ2V0QWxsRnJvbUluZGV4KCdzcGVjX291dHB1dHMnLCAnYnktaW5wdXQnLCBpbnB1dElkKVxuICAgIHJldHVybiBvdXRwdXRzWzBdIC8vIFJldHVybiBsYXRlc3RcbiAgfVxuXG4gIGFzeW5jIGdldFJlY2VudFNwZWNPdXRwdXRzKGxpbWl0ID0gMTApOiBQcm9taXNlPFNwZWNPdXRwdXRSZWNvcmRbXT4ge1xuICAgIGNvbnN0IG91dHB1dHMgPSBhd2FpdCB0aGlzLmRiLmdldEFsbEZyb21JbmRleCgnc3BlY19vdXRwdXRzJywgJ2J5LWNyZWF0ZWQnKVxuICAgIHJldHVybiBvdXRwdXRzLnNsaWNlKC1saW1pdCkucmV2ZXJzZSgpXG4gIH1cblxuICAvLyBTcGVjIEV2YWx1YXRpb25zXG4gIGFzeW5jIGNyZWF0ZVNwZWNFdmFsdWF0aW9uKGRhdGE6IE9taXQ8U3BlY0V2YWx1YXRpb24sICdpZCcgfCAnY3JlYXRlZF9hdCc+KTogUHJvbWlzZTxTcGVjRXZhbHVhdGlvbj4ge1xuICAgIGNvbnN0IGV2YWx1YXRpb246IFNwZWNFdmFsdWF0aW9uID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGlkOiB1dWlkdjQoKSxcbiAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgfVxuICAgIGF3YWl0IHRoaXMuZGIuYWRkKCdzcGVjX2V2YWx1YXRpb25zJywgZXZhbHVhdGlvbilcbiAgICByZXR1cm4gZXZhbHVhdGlvblxuICB9XG5cbiAgYXN5bmMgZ2V0U3BlY0V2YWx1YXRpb24ob3V0cHV0SWQ6IHN0cmluZyk6IFByb21pc2U8U3BlY0V2YWx1YXRpb24gfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBldmFsdWF0aW9ucyA9IGF3YWl0IHRoaXMuZGIuZ2V0QWxsRnJvbUluZGV4KCdzcGVjX2V2YWx1YXRpb25zJywgJ2J5LW91dHB1dCcsIG91dHB1dElkKVxuICAgIHJldHVybiBldmFsdWF0aW9uc1swXVxuICB9XG59XG5cbi8vIEdsb2JhbCBkYXRhYmFzZSBzZXJ2aWNlIGluc3RhbmNlXG5sZXQgZGJTZXJ2aWNlOiBEYXRhYmFzZVNlcnZpY2UgfCBudWxsID0gbnVsbFxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0REJTZXJ2aWNlKCk6IFByb21pc2U8RGF0YWJhc2VTZXJ2aWNlPiB7XG4gIGlmICghZGJTZXJ2aWNlKSB7XG4gICAgY29uc3QgZGIgPSBhd2FpdCBpbml0REIoKVxuICAgIGRiU2VydmljZSA9IG5ldyBEYXRhYmFzZVNlcnZpY2UoZGIpXG4gIH1cbiAgcmV0dXJuIGRiU2VydmljZVxufSJdLCJuYW1lcyI6WyJvcGVuREIiLCJ2NCIsInV1aWR2NCIsIkRCX05BTUUiLCJEQl9WRVJTSU9OIiwiZGJJbnN0YW5jZSIsImluaXREQiIsInVwZ3JhZGUiLCJkYiIsInByb2plY3RTdG9yZSIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImNyZWF0ZUluZGV4IiwiY29udGV4dFN0b3JlIiwiZGlmZlN0b3JlIiwiaW5wdXRTdG9yZSIsIm91dHB1dFN0b3JlIiwicmV2aXNpb25TdG9yZSIsImV2YWxTdG9yZSIsIkRhdGFiYXNlU2VydmljZSIsImNyZWF0ZVByb2plY3QiLCJkYXRhIiwicHJvamVjdCIsImlkIiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJhZGQiLCJnZXRQcm9qZWN0IiwiZ2V0IiwiZ2V0UHJvamVjdHMiLCJnZXRBbGxGcm9tSW5kZXgiLCJ1cGRhdGVQcm9qZWN0IiwidXBkYXRlcyIsIkVycm9yIiwidXBkYXRlZCIsInB1dCIsImNyZWF0ZVByb2plY3RDb250ZXh0IiwiY29udGV4dCIsImlzX2FjdGl2ZSIsImRlYWN0aXZhdGVQcm9qZWN0Q29udGV4dHMiLCJwcm9qZWN0X2lkIiwiZ2V0QWN0aXZlUHJvamVjdENvbnRleHQiLCJwcm9qZWN0SWQiLCJjb250ZXh0cyIsImdldFByb2plY3RDb250ZXh0cyIsImFjdGl2YXRlUHJvamVjdENvbnRleHQiLCJjb250ZXh0SWQiLCJhY3RpdmVDb250ZXh0cyIsImNyZWF0ZVNwZWNJbnB1dCIsImlucHV0IiwiZ2V0U3BlY0lucHV0IiwiZ2V0U3BlY0lucHV0c0J5UHJvamVjdCIsImNyZWF0ZVNwZWNPdXRwdXQiLCJvdXRwdXQiLCJnZXRTcGVjT3V0cHV0IiwiZ2V0U3BlY091dHB1dEJ5SW5wdXQiLCJpbnB1dElkIiwib3V0cHV0cyIsImdldFJlY2VudFNwZWNPdXRwdXRzIiwibGltaXQiLCJzbGljZSIsInJldmVyc2UiLCJjcmVhdGVTcGVjRXZhbHVhdGlvbiIsImV2YWx1YXRpb24iLCJnZXRTcGVjRXZhbHVhdGlvbiIsIm91dHB1dElkIiwiZXZhbHVhdGlvbnMiLCJkYlNlcnZpY2UiLCJnZXREQlNlcnZpY2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/database.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/projectContext.ts":
/*!***********************************!*\
  !*** ./src/lib/projectContext.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PROJECT_CONTEXT: () => (/* binding */ DEFAULT_PROJECT_CONTEXT),\n/* harmony export */   ProjectContextService: () => (/* binding */ ProjectContextService),\n/* harmony export */   projectContextService: () => (/* binding */ projectContextService)\n/* harmony export */ });\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/database */ \"(ssr)/./src/lib/database.ts\");\n\n// Deep merge utility for context merging\nfunction deepMerge(target, source) {\n    const result = {\n        ...target\n    };\n    for(const key in source){\n        if (source[key] !== undefined) {\n            if (Array.isArray(source[key])) {\n                result[key] = source[key];\n            } else if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n                result[key] = deepMerge(result[key] || {}, source[key]);\n            } else {\n                result[key] = source[key];\n            }\n        }\n    }\n    return result;\n}\n// Context difference calculation\nfunction calculateDiff(previous, current) {\n    const diff = {};\n    // Simple field-by-field comparison\n    for(const key in current){\n        if (JSON.stringify(previous[key]) !== JSON.stringify(current[key])) {\n            diff[key] = {\n                previous: previous[key],\n                current: current[key]\n            };\n        }\n    }\n    return diff;\n}\n// Default context template\nconst DEFAULT_PROJECT_CONTEXT = {\n    glossary: {},\n    stakeholders: [],\n    constraints: [],\n    non_functional: [],\n    api_catalog: [],\n    data_models: [],\n    envs: [\n        'local',\n        'dev',\n        'test',\n        'prod'\n    ],\n    labels: {}\n};\n// Context merging service\nclass ProjectContextService {\n    // Resolve final context by merging project defaults with feature overrides\n    async resolveContext(projectId, featureContext) {\n        const dbService = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_0__.getDBService)();\n        // Get active project context (defaults)\n        const activeContext = await dbService.getActiveProjectContext(projectId);\n        const projectDefaults = activeContext?.context_json || DEFAULT_PROJECT_CONTEXT;\n        // If no feature context or inherit_from_project is false, return project defaults\n        if (!featureContext || !featureContext.inherit_from_project) {\n            return projectDefaults;\n        }\n        // Merge project defaults with feature overrides\n        let resolvedContext = {\n            ...projectDefaults\n        };\n        // Apply feature-level context fields\n        if (featureContext.stakeholders?.length) {\n            const existingStakeholders = resolvedContext.stakeholders.map((s)=>s.name);\n            const newStakeholderNames = featureContext.stakeholders.filter((name)=>!existingStakeholders.includes(name));\n            // Add new stakeholders with basic info\n            const newStakeholders = newStakeholderNames.map((name)=>({\n                    name,\n                    role: 'Stakeholder',\n                    interests: []\n                }));\n            resolvedContext.stakeholders = [\n                ...resolvedContext.stakeholders,\n                ...newStakeholders\n            ];\n        }\n        if (featureContext.constraints?.length) {\n            const uniqueConstraints = new Set([\n                ...resolvedContext.constraints,\n                ...featureContext.constraints\n            ]);\n            resolvedContext.constraints = Array.from(uniqueConstraints);\n        }\n        if (featureContext.non_functional?.length) {\n            const uniqueNonFunctional = new Set([\n                ...resolvedContext.non_functional,\n                ...featureContext.non_functional\n            ]);\n            resolvedContext.non_functional = Array.from(uniqueNonFunctional);\n        }\n        // Apply explicit overrides (feature overrides always win)\n        if (featureContext.overrides) {\n            resolvedContext = deepMerge(resolvedContext, featureContext.overrides);\n        }\n        return resolvedContext;\n    }\n    // Create a new project context version\n    async createProjectContext(projectId, context, isActive = false) {\n        const dbService = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_0__.getDBService)();\n        // Get current version number\n        const existingContexts = await dbService.getProjectContexts(projectId);\n        const nextVersion = existingContexts.length > 0 ? Math.max(...existingContexts.map((c)=>c.version)) + 1 : 1;\n        // Create new context\n        const newContext = await dbService.createProjectContext({\n            project_id: projectId,\n            context_json: context,\n            version: nextVersion,\n            is_active: isActive ? 1 : 0\n        });\n        // Create diff if there's a previous version\n        if (existingContexts.length > 0) {\n            const previousContext = existingContexts[existingContexts.length - 1];\n            const diff = calculateDiff(previousContext.context_json, context);\n            if (Object.keys(diff).length > 0) {\n            // Store the diff (if needed for history tracking)\n            // await dbService.createProjectContextDiff(...) \n            }\n        }\n        return newContext;\n    }\n    // Update and version a project context\n    async updateProjectContext(projectId, updates, createNewVersion = true) {\n        const dbService = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_0__.getDBService)();\n        // Get current active context\n        const activeContext = await dbService.getActiveProjectContext(projectId);\n        if (!activeContext) {\n            throw new Error('No active context found for project');\n        }\n        // Merge updates\n        const updatedContext = deepMerge(activeContext.context_json, updates);\n        if (createNewVersion) {\n            // Create new version\n            return this.createProjectContext(projectId, updatedContext, true);\n        } else {\n            // Update in place (rare case)\n            activeContext.context_json = updatedContext;\n            await dbService.updateProject(activeContext.id, activeContext);\n            return activeContext;\n        }\n    }\n    // Get context history with diffs\n    async getContextHistory(projectId) {\n        const dbService = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_0__.getDBService)();\n        const contexts = await dbService.getProjectContexts(projectId);\n        // Sort by version\n        contexts.sort((a, b)=>a.version - b.version);\n        // Calculate diffs between versions\n        const history = contexts.map((context, index)=>{\n            let diff = {};\n            if (index > 0) {\n                diff = calculateDiff(contexts[index - 1].context_json, context.context_json);\n            }\n            return {\n                ...context,\n                diff,\n                is_current: context.is_active === 1\n            };\n        });\n        return history;\n    }\n    // Activate a specific context version\n    async activateContextVersion(contextId) {\n        const dbService = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_0__.getDBService)();\n        await dbService.activateProjectContext(contextId);\n    }\n    // Preview resolved context without saving\n    async previewResolvedContext(projectId, featureContext) {\n        const dbService = await (0,_lib_database__WEBPACK_IMPORTED_MODULE_0__.getDBService)();\n        const activeContext = await dbService.getActiveProjectContext(projectId);\n        const projectDefaults = activeContext?.context_json || DEFAULT_PROJECT_CONTEXT;\n        const resolved = await this.resolveContext(projectId, featureContext);\n        // Calculate what came from where for transparency\n        const inherited = {\n            ...projectDefaults\n        };\n        const overrides = featureContext.overrides || {};\n        return {\n            resolved,\n            inherited_from_project: inherited,\n            feature_overrides: overrides\n        };\n    }\n    // Validate context completeness\n    validateContext(context) {\n        const warnings = [];\n        const suggestions = [];\n        // Check for common missing elements\n        if (Object.keys(context.glossary).length === 0) {\n            suggestions.push('Consider adding domain terms to the glossary');\n        }\n        if (context.stakeholders.length === 0) {\n            warnings.push('No stakeholders defined - this may lead to unclear requirements');\n        }\n        if (context.constraints.length === 0) {\n            suggestions.push('Consider adding technical or business constraints');\n        }\n        if (context.non_functional.length === 0) {\n            suggestions.push('Consider adding non-functional requirements (performance, security, etc.)');\n        }\n        if (context.api_catalog.length === 0) {\n            suggestions.push('Consider documenting existing APIs and services');\n        }\n        // Check stakeholder completeness\n        const incompleteStakeholders = context.stakeholders.filter((s)=>!s.role || s.interests.length === 0);\n        if (incompleteStakeholders.length > 0) {\n            warnings.push(`${incompleteStakeholders.length} stakeholder(s) missing role or interests`);\n        }\n        const isValid = warnings.length === 0;\n        return {\n            isValid,\n            warnings,\n            suggestions\n        };\n    }\n    // Import context from external source (Jira, Confluence, etc.)\n    async importContext(projectId, source, data) {\n        // Placeholder for external integrations\n        switch(source){\n            case 'json':\n                // Validate and import JSON context\n                const imported = data;\n                return this.createProjectContext(projectId, imported, false).then((c)=>c.context_json);\n            case 'jira':\n                // Extract context from Jira project metadata\n                // This would integrate with Jira API to extract components, users, etc.\n                throw new Error('Jira import not yet implemented');\n            case 'confluence':\n                // Extract context from Confluence space\n                throw new Error('Confluence import not yet implemented');\n            default:\n                throw new Error(`Unknown import source: ${source}`);\n        }\n    }\n}\n// Default service instance\nconst projectContextService = new ProjectContextService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/projectContext.ts\n");

/***/ })

};
;